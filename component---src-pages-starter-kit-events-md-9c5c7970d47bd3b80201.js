"use strict";(self.webpackChunkcommerce_extensibility=self.webpackChunkcommerce_extensibility||[]).push([[5],{87581:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return h}});var a=t(58168),o=t(80045),i=(t(88763),t(15680)),r=t(83407);t(93408);const s=["components"],d={},l=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",n)},m=l("InlineAlert"),p=l("CodeBlock"),c={_frontmatter:d},u=r.A;function h(e){let{components:n}=e,t=(0,o.A)(e,s);return(0,i.mdx)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"event-based-integrations"},"Event-based integrations"),(0,i.mdx)("p",null,"The following sections demonstrate all the event-based integrations that Adobe Commerce integration starter kit has to offer, including webhook ingestion, event handler actions and event ingestion actions."),(0,i.mdx)("actions",null),(0,i.mdx)("h2",{id:"ingestion-webhook"},"Ingestion webhook"),(0,i.mdx)("p",null,"The Adobe Commerce integration starter kit supports ingestion webhooks. They provide an alternative method to deliver events for scenarios where the calling system cannot produce a request to interact directly with the event provider. For example, if the client cannot add custom headers to the request."),(0,i.mdx)("h3",{id:"enabling-ingest-webhooks"},"Enabling ingest webhooks"),(0,i.mdx)("p",null,"To enable webhooks in the starter kit, uncomment the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ingestion")," section in your ",(0,i.mdx)("inlineCode",{parentName:"p"},"app.config.yaml")," file:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-yaml"},"ingestion:\n  license: Apache-2.0\n  actions:\n    $include: ./actions/ingestion/actions.config.yaml\n")),(0,i.mdx)("h3",{id:"customizing-ingest-webhooks"},"Customizing ingest webhooks"),(0,i.mdx)("p",null,"Data parameters contain the information of the ",(0,i.mdx)("a",{parentName:"p",href:"../events/"},"event")," to publish. Each event must include an entity, ",(0,i.mdx)("inlineCode",{parentName:"p"},"event"),", and ",(0,i.mdx)("inlineCode",{parentName:"p"},"value"),". The value parameter contains the data to send through the event."),(0,i.mdx)("p",null,"The following entities and their corresponding events are currently available:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"product"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.catalog_product_create")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.catalog_product_update")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.catalog_product_delete")))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"customer"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.customer_create")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.customer_update")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.customer_delete")))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"customer-group"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.customer_group_create")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.customer_group_update")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.customer_group_delete")))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"order"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.sales_order_status_update")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.sales_order_shipment_create")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.sales_order_shipment_update")))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"stock"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"be-observer.catalog_stock_update"))))),(0,i.mdx)(m,{variant:"tip",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"The list of entities and their corresponding ",(0,i.mdx)("inlineCode",{parentName:"p"},"backoffice")," events is available in the starter kit's ",(0,i.mdx)("inlineCode",{parentName:"p"},"scripts/onboarding/config/events.json")," file."),(0,i.mdx)("p",null,"The following JSON payload demonstrates a ",(0,i.mdx)("inlineCode",{parentName:"p"},"product")," entity with a ",(0,i.mdx)("inlineCode",{parentName:"p"},"create")," event:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "uid": "event_uid_1",\n    "event": "be-observer.catalog_product_create",\n    "value": {\n      "sku": "PRODUCT_SKU",\n      "name": "Product SKU",\n      "price": 1,\n      "description": "Product SKU description"\n    }\n  }\n}\n')),(0,i.mdx)("h3",{id:"authentication-and-parameters"},"Authentication and parameters"),(0,i.mdx)("p",null,"Ingest webhooks are not authenticated by default. To add authentication and enable an authentication check, modify the ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions/ingestion/webhook/auth.js")," file's ",(0,i.mdx)("inlineCode",{parentName:"p"},"checkAuthentication")," function."),(0,i.mdx)("p",null,"You can access any needed environment parameter from ",(0,i.mdx)("inlineCode",{parentName:"p"},"params"),". Use the following parameters to inform your ",(0,i.mdx)("inlineCode",{parentName:"p"},".env")," authentication settings."),(0,i.mdx)("p",null,"You can provide additional ",(0,i.mdx)("inlineCode",{parentName:"p"},".env")," parameters by adding them to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"inputs")," section of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"actions/ingestion/webhook/actions.config.yaml")," file:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-yaml"},"webhook:\n  function: ./consumer/index.js\n  web: 'no'\n  runtime: nodejs:16\n  inputs:\n    LOG_LEVEL: debug\n    OAUTH_ORG_ID: $OAUTH_ORG_ID\n    OAUTH_CLIENT_ID: $OAUTH_CLIENT_ID\n    OAUTH_CLIENT_SECRET: $OAUTH_CLIENT_SECRET\n    OAUTH_TECHNICAL_ACCOUNT_ID: $OAUTH_TECHNICAL_ACCOUNT_ID\n    OAUTH_TECHNICAL_ACCOUNT_EMAIL: $OAUTH_TECHNICAL_ACCOUNT_EMAIL\n    IO_MANAGEMENT_BASE_URL: $IO_MANAGEMENT_BASE_URL\n    IO_CONSUMER_ID: $IO_CONSUMER_ID\n    IO_PROJECT_ID: $IO_PROJECT_ID\n    IO_WORKSPACE_ID: $IO_WORKSPACE_ID\n    AIO_runtime_namespace: $AIO_runtime_namespace\n    \n    YOUR_PARAM: $YOUR_PARAM_ENV\n    \n  annotations:\n    require-adobe-auth: false\n    final: true\n")),(0,i.mdx)("h2",{id:"consumer-action"},(0,i.mdx)("inlineCode",{parentName:"h2"},"consumer")," action"),(0,i.mdx)("p",null,"The main purpose of this action is to route events to the ",(0,i.mdx)("a",{parentName:"p",href:"#event-handler-action"},(0,i.mdx)("inlineCode",{parentName:"a"},"event handler")," action"),". Normally, this routing is determined by the name of the event received."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"consumer")," action is subscribed to a set of events. In many cases, all the events originate from the same entity, such as the ",(0,i.mdx)("inlineCode",{parentName:"p"},"product"),' entity. However, there are examples where a consumer receives events from multiple entities belonging to the same "domain", such as ',(0,i.mdx)("inlineCode",{parentName:"p"},"order")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"shipment"),". When the event provider receives an event, this runtime action will be automatically activated."),(0,i.mdx)("p",null,"The response returned by a ",(0,i.mdx)("inlineCode",{parentName:"p"},"consumer")," action is expected to be consistent with the response received from the activation of the subsequent ",(0,i.mdx)("inlineCode",{parentName:"p"},"event handler")," action. For example, if the ",(0,i.mdx)("inlineCode",{parentName:"p"},"event handler")," action returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"HTTP/400")," status, the consumer action is expected to respond with the same status. This ensures that the event processing is appropriately retried based on the event handler action response."),(0,i.mdx)("p",null,"When it receives an event that it does not know how to route, it is expected to return HTTP/400 status. This will prevent the event handling from being retried."),(0,i.mdx)("p",null,"By default, ",(0,i.mdx)("inlineCode",{parentName:"p"},"consumer")," actions have the following response:"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"javascript, javascript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"success"},"Success"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// ./actions/responses.js#successResponse\nreturn {\n  statusCode: 200,\n  body: {\n    type: 'EVENT TYPE',\n    response: {\n      // Response returned by the event handler action\n    }\n  }\n}\n")),(0,i.mdx)("h3",{id:"failure"},"Failure"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// ./actions/responses.js#errorResponse\nreturn {\n  error: {\n    statusCode: 400, // 404, 500, etc,\n    body : {\n      error: 'YOUR ERROR MESSAGE'\n    }\n  }\n}\n")),(0,i.mdx)("h2",{id:"event-handler-action"},(0,i.mdx)("inlineCode",{parentName:"h2"},"event handler")," action"),(0,i.mdx)("p",null,"The main purpose of this action is to manage an event that notifies you about a change in one of the integrated systems. Typically, its business logic includes an API call to propagate the changes to the other system being integrated."),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"#consumer-action"},(0,i.mdx)("inlineCode",{parentName:"a"},"consumer")," action")," synchronously activates these event handler actions to delegate the handling of an event."),(0,i.mdx)("p",null,"The response returned by an event handler action includes a ",(0,i.mdx)("inlineCode",{parentName:"p"},"statusCode")," attribute. This attribute allows the consumer action to propagate the response HTTP status code upstream to properly reflect the event registration information located on the ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/events/docs/support/tracing/"},"Debug Tracing")," tab in the Adobe Developer Console."),(0,i.mdx)("p",null,"By default, ",(0,i.mdx)("inlineCode",{parentName:"p"},"event handler")," actions have the following response:"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"javascript, javascript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"success-1"},"Success"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// ./actions/responses.js#actionSuccessResponse\nreturn {\n  statusCode: 200,\n  body: {\n    success: true,\n    message: 'YOUR SUCCESS MESSAGE'\n  }\n}\n")),(0,i.mdx)("h3",{id:"failure-1"},"Failure"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// ./actions/responses.js#actionErrorResponse\nreturn {\n  statusCode: 400, // 404, 500, etc\n  body: {\n    success: false,\n    error: 'YOUR ERROR MESSAGE'\n  }\n}\n")),(0,i.mdx)("h2",{id:"event-ingestion-action"},"event ingestion action"),(0,i.mdx)("p",null,"The main purpose of this runtime action is to provide an alternative method to deliver events to the integration, if the 3rd-party, backoffice application cannot fulfill the ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/events/docs/guides/api/eventsingress_api/"},"Events Publishing API's")," requirements."),(0,i.mdx)("p",null,"For more information, see ",(0,i.mdx)("a",{parentName:"p",href:"#ingestion-webhook"},"Ingestion webhooks"),"."),(0,i.mdx)("p",null,"To get the URL of the webhook, run the following command:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"aio runtime action get ingestion/webhook --url\n")),(0,i.mdx)("p",null,"By default, ",(0,i.mdx)("inlineCode",{parentName:"p"},"event ingestion")," actions have the following response:"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"javascript, javascript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"success-2"},"Success"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// ./actions/responses.js#successResponse\nreturn {\n  statusCode: 200,\n  body: {\n    type: 'EVENT TYPE',\n    response: {\n      success: true,\n      message: 'Event published successfully'\n    }\n  }\n}\n")),(0,i.mdx)("h3",{id:"failure-2"},"Failure"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"// ./actions/responses.js#errorResponse\nreturn {\n  error: {\n    statusCode: 400, // 404, 500, etc,\n    body : {\n      error: 'YOUR ERROR MESSAGE'\n    }\n  }\n}\n")),(0,i.mdx)("h2",{id:"sample-code"},"Sample code"),(0,i.mdx)("p",null,"The Adobe Commerce Extensibility Code Samples repository contains samples that illustrate the following concepts:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/adobe/adobe-commerce-samples/tree/main/starter-kit/add-ingestion-scheduler"},"Scheduled ingestion action")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/adobe/adobe-commerce-samples/tree/main/starter-kit/customize-ingestion-webhook"},"Customizing an event ingestion webhook"))))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-starter-kit-events-md-9c5c7970d47bd3b80201.js.map