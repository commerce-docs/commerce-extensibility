{"version":3,"file":"component---src-pages-events-consume-events-examples-runtime-action-commerce-callback-md-f978c34e343763da4dda.js","mappings":"wSAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,8CACH,+CACL,kBAAK,kNACL,eACE,GAAM,+BACH,gCACL,kBAAK,gGAA8F,uBAAYC,WAAW,KAAM,mCAAgD,aAChL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,k4CA2CP,kBAAK,QAAM,uBAAYA,WAAW,KAAM,QAAqB,sDAAoD,uBAAYA,WAAW,KAAM,mCAAgD,YAC9L,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,yCAEP,kBAAK,yNACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,uZAYP,kBAAK,yCAAuC,uBAAYA,WAAW,KAAM,WAAwB,+BAA6B,cAAGA,WAAW,IACxI,KAAQ,8GACL,+BAAmC,MAC1C,kBAAK,yBAAuB,uBAAYA,WAAW,KAAM,eAA4B,MAAI,uBAAYA,WAAW,KAAM,kBAA+B,MAAI,uBAAYA,WAAW,KAAM,eAA4B,UAAQ,uBAAYA,WAAW,KAAM,qBAAkC,kCAAgC,uBAAYA,WAAW,KAAM,0BAAuC,6DAA2D,cAAGA,WAAW,IAClc,KAAQ,kFACL,eAAmB,6EAA2E,cAAGA,WAAW,IAC/G,KAAQ,0EACL,aAAiB,cAAY,cAAGA,WAAW,IAC9C,KAAQ,qHACL,iDAAqD,yCAC5D,kBAAK,gNACL,kBAAK,8GAA4G,uBAAYA,WAAW,KAAM,mCAAgD,mFAGlM,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-extensibility/./src/pages/events/consume-events-examples/runtime-action-commerce-callback.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-extensibility/commerce-extensibility/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"runtime-action-with-a-callback-to-commerce\"\n    }}>{`Runtime Action with a Callback to Commerce`}</h1>\n    <p>{`This example provides sample code for a runtime action that can consume an Adobe Commerce event and make an API call back to Commerce to obtain more information before sending data to a third-party system.`}</p>\n    <h2 {...{\n      \"id\": \"runtime-action-example-code\"\n    }}>{`Runtime action example code`}</h2>\n    <p>{`You could use the following JavaScript code sample to create a runtime action for consuming `}<inlineCode parentName=\"p\">{`observer.sales_order_save_after`}</inlineCode>{` events.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { Core } = require('@adobe/aio-sdk')\nconst { errorResponse } = require('../utils')\nconst { getCommerceOauthClient } = require('../oauth1a')\nconst { sendOrderToErpSystem } = require('../erp')\n  \nasync function main (params) {\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n  \n  try {\n    event_payload = params.data.value\n    if (!event_payload.hasOwnProperty('extension_attributes')) {\n      // Fetch extension attributes for order and add to order event payload\n      const oauth = getCommerceOauthClient(\n        {\n          url: params.COMMERCE_BASE_URL,\n          consumerKey: params.COMMERCE_CONSUMER_KEY,\n          consumerSecret: params.COMMERCE_CONSUMER_SECRET,\n          accessToken: params.COMMERCE_ACCESS_TOKEN,\n          accessTokenSecret: params.COMMERCE_ACCESS_TOKEN_SECRET\n        },\n        logger\n      )\n      const content = await oauth.get('orders/' + event_payload.entity_id)\n      event_payload.extension_attributes = content.extension_attributes\n    }\n\n    // Send event data to a third-party ERP system\n    await sendOrderToErpSystem(event_payload)\n      \n    return {\n      statusCode: 200,\n      body: event_payload\n    }\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n  \nexports.main = main\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` action first accesses the payload for a received `}<inlineCode parentName=\"p\">{`observer.sales_order_save_after`}</inlineCode>{` event:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`event_payload = params.data.value\n`}</code></pre>\n    <p>{`The event payload for this event could not contain the saved order's extension attributes. If needed, you can fetch the extension attributes for the specific order captured by the event using a Commerce API call:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  const oauth = getCommerceOauthClient(\n    {\n      url: params.COMMERCE_BASE_URL,\n      consumerKey: params.COMMERCE_CONSUMER_KEY,\n      consumerSecret: params.COMMERCE_CONSUMER_SECRET,\n      accessToken: params.COMMERCE_ACCESS_TOKEN,\n      accessTokenSecret: params.COMMERCE_ACCESS_TOKEN_SECRET\n    },\n    logger\n  )\n  const content = await oauth.get('orders/' + event_payload.entity_id)\n`}</code></pre>\n    <p>{`This example uses functions from the `}<inlineCode parentName=\"p\">{`oauth1a`}</inlineCode>{` module, as defined in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/adobe-commerce-samples/blob/main/admin-ui-sdk/menu/custom-menu/actions/oauth1a.js\"\n      }}>{`adobe-commerce-samples repo`}</a>{`.`}</p>\n    <p>{`You can retrieve the `}<inlineCode parentName=\"p\">{`consumerKey`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`consumerSecret`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`accessToken`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`accessTokenSecret`}</inlineCode>{` provided in the input to the `}<inlineCode parentName=\"p\">{`getCommerceOauthClient`}</inlineCode>{` function from Commerce after creating and activating an `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/en/docs/commerce-admin/systems/integrations\"\n      }}>{`Integration`}</a>{` in the Commerce admin. You can configure these values in an App Builder `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/app-builder/docs/guides/configuration/#env\"\n      }}>{`.env file`}</a>{` and then `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/app-builder/docs/guides/configuration/#using-environment-variables-in-runtime-actions\"\n      }}>{`pass them as inputs to the App Builder action`}</a>{` through the action's configuration.`}</p>\n    <p>{`You can now add the order's extension attributes retrieved from Commerce to the order event payload, and send the payload to a third-party Enterprise Resource Planning (ERP) system using a custom module.`}</p>\n    <p>{`After creating a runtime action using this code, you can create an event registration to subscribe to the `}<inlineCode parentName=\"p\">{`observer.sales_order_save_after`}</inlineCode>{` event and configure the new runtime action to receive the event notifications.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}