{"version":3,"file":"component---src-pages-webhooks-signature-verification-md-34c267c54833ae5b0ff5.js","mappings":"wSAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mCACH,oCACL,kBAAK,4OACL,eACE,GAAM,iCACH,kCACL,kBAAK,oLACL,kBAAK,kDAAgD,mBAAQC,WAAW,KAAM,UAAmB,kBAAgB,mBAAQA,WAAW,KAAM,iBAA0B,OAAK,mBAAQA,WAAW,KAAM,kBAA2B,OAAK,mBAAQA,WAAW,KAAM,YAAqB,oBAAkB,mBAAQA,WAAW,KAAM,WAAoB,QAAM,mBAAQA,WAAW,KAAM,OAAgB,iBAAe,mBAAQA,WAAW,KAAM,uBAAgC,iCACtc,mBAAG,iBAAMA,WAAW,IAChB,UAAa,4BACb,MAAS,CACP,SAAY,WACZ,QAAW,QACX,WAAc,OACd,YAAe,OACf,SAAY,WAEX,YACH,iBAAMA,WAAW,OACf,UAAa,qCACb,MAAS,CACP,cAAiB,WACjB,SAAY,WACZ,OAAU,IACV,KAAQ,IACR,QAAW,QACX,WAAc,oBACd,cAAiB,UAET,QAChB,oBAASA,WAAW,QAAS,gBACrB,mBAAQA,WAAW,UACnB,OAAU,CAAC,0GAA2G,0GAA2G,2GAA4G,2GAA4G,4GACzb,MAAS,oCACT,KAAQ,eACI,gBACZ,mBAAQA,WAAW,UACnB,OAAU,CAAC,yGAA0G,yGAA0G,0GAA2G,0GAA2G,2GACrb,MAAS,oCACT,KAAQ,cACI,gBACZ,gBAAKA,WAAW,UAChB,UAAa,0BACb,IAAO,oGACP,IAAO,yBACP,MAAS,yBACT,QAAW,OACX,MAAS,CACP,MAAS,OACT,OAAU,OACV,OAAU,IACV,cAAiB,SACjB,SAAY,WACZ,QAAW,IACX,WAAc,eACd,MAAS,UACT,UAAa,+BACb,IAAO,IACP,KAAQ,OAED,cACC,YAElB,kBAAK,iEAA+D,uBAAYA,WAAW,KAAM,sCAAmD,8HACpJ,eACE,GAAM,wBACH,yBACL,kBAAK,qDAAmD,uBAAYA,WAAW,KAAM,sCAAmD,mJACxI,kBAAK,kFACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBACV,ipBAqBP,kBAAK,6FACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBACV,8pBAuBP,kBAAK,4KACL,eACE,GAAM,kDACH,mDACL,kBAAK,+DAA6D,uBAAYA,WAAW,KAAM,YAAyB,uBAAqB,uBAAYA,WAAW,KAAM,mBAAgC,oBAAkB,uBAAYA,WAAW,KAAM,YAAyB,2HAClR,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,0FAKP,kBAAK,wGACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBACV,gnCA4CX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-extensibility/./src/pages/webhooks/signature-verification.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-extensibility/commerce-extensibility/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"webhooks-signature-verification\"\n    }}>{`Webhooks signature verification`}</h1>\n    <p>{`Because webhook URLs are publicly accessible, it is important to ensure that the incoming requests are sent by Adobe Commerce and not by a third-party actor. You can enable signature verification to ensure your webhooks are secure.`}</p>\n    <h2 {...{\n      \"id\": \"enable-signature-verification\"\n    }}>{`Enable signature verification`}</h2>\n    <p>{`Signature verifications are disabled by default, because you might have other ways for securing your webhooks. Authorization headers and IP whitelisting are common techniques.`}</p>\n    <p>{`To enable signature verification, navigate to `}<strong parentName=\"p\">{`Stores`}</strong>{` > Settings > `}<strong parentName=\"p\">{`Configuration`}</strong>{` > `}<strong parentName=\"p\">{`Adobe Services`}</strong>{` > `}<strong parentName=\"p\">{`Webhooks`}</strong>{` and change the `}<strong parentName=\"p\">{`Enabled`}</strong>{` to `}<strong parentName=\"p\">{`Yes`}</strong>{`. Then click `}<strong parentName=\"p\">{`Regenerate key pair`}</strong>{` to generate a new key pair.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"44.6875%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/5530d/signature-configuration.webp 320w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/0c8fb/signature-configuration.webp 640w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/94b1e/signature-configuration.webp 1280w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/0b34d/signature-configuration.webp 1920w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/2ae4e/signature-configuration.webp 2146w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/dd4a7/signature-configuration.png 320w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/0f09e/signature-configuration.png 640w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/bbbf7/signature-configuration.png 1280w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/ac7a9/signature-configuration.png 1920w\", \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/e52c7/signature-configuration.png 2146w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-extensibility/static/11306fd06aea12641aa4f2feedfd9d1f/bbbf7/signature-configuration.png\",\n            \"alt\": \"Webhooks configuration\",\n            \"title\": \"Webhooks configuration\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`After enabling the signature verification, Commerce adds the `}<inlineCode parentName=\"p\">{`x-adobe-commerce-webhook-signature`}</inlineCode>{` header. The value of this header is a base64 encoded HMAC SHA256 signature of the request body based on the private key.`}</p>\n    <h2 {...{\n      \"id\": \"verify-the-signature\"\n    }}>{`Verify the signature`}</h2>\n    <p>{`To verify the signature you must decode value of `}<inlineCode parentName=\"p\">{`x-adobe-commerce-webhook-signature`}</inlineCode>{` header and compare it with the HMAC SHA256 signature of the base64 encoded request body using the public key from the webhooks configuration.`}</p>\n    <p>{`Here is an example of the verification method of the signature using node.js:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const fs = require(\"fs\");\nconst crypto = require(\"crypto\");\n\nmodule.exports = {\n    validate: function (req){\n        const publicKey = fs.readFileSync(__dirname + '/publickey', 'utf-8');\n\n        if (!req.headers['x-adobe-commerce-webhook-signature']) {\n            return false;\n        }\n\n        const signature = req.headers['x-adobe-commerce-webhook-signature'];\n        const verifier = crypto.createVerify('SHA256');\n\n        const base64Payload = Buffer.from(JSON.stringify(req.body)).toString('base64');\n        verifier.update(base64Payload);\n\n        return verifier.verify(publicKey, signature, 'base64');\n    }\n}\n`}</code></pre>\n    <p>{`The following example shows how to use the signature verification in the webhook action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const signatureValidator = require('../signatureValidator');\n\napp.post('/validate-signature', function (req, res) {\n    console.log(JSON.stringify(req.body, null, 4));\n    console.log(JSON.stringify(req.headers, null, 4));\n\n    let operations = [];\n    if (signatureValidator.validate(req)) {\n        // Perform the webhook action\n        console.log(\"The signature is valid.\");\n        operations.push({\n            op: 'success'\n        });\n    } else {\n        console.log(\"The signature is invalid.\");\n        operations.push({\n            op: 'exception',\n        });\n    }\n    console.log(operations);\n    res.json(operations);\n});\n`}</code></pre>\n    <p>{`Keep in mind that when the key pair is regenerated, the old public key will be invalid. You must subsequently update the public key in the signature verification code.`}</p>\n    <h2 {...{\n      \"id\": \"verify-the-signature-in-the-app-builder-action\"\n    }}>{`Verify the signature in the App Builder action`}</h2>\n    <p>{`To verify the signature in the App Builder action, set the `}<inlineCode parentName=\"p\">{`raw-http`}</inlineCode>{` annotation in the `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` file. When the `}<inlineCode parentName=\"p\">{`raw-http`}</inlineCode>{` annotation is configured, the HTTP request query and body parameters are passed to the action as reserved properties.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`    inputs:\n      PUBLIC_KEY: $PUBLIC_KEY\n    annotations:\n      raw-http: true\n`}</code></pre>\n    <p>{`The following code example below shows how the signature can be verified in the App Builder action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { Core } = require('@adobe/aio-sdk')\nconst { errorResponse } = require('../utils')\nconst crypto = require('crypto');\n\nasync function main (params) {\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    const signature = params.__ow_headers['x-adobe-commerce-webhook-signature'] || '';\n    const verifier = crypto.createVerify('SHA256');\n    verifier.update(params.__ow_body);\n\n    const isSignatureValid = verifier.verify(params.PUBLIC_KEY, signature, 'base64');\n\n    let operations = [];\n    if (isSignatureValid) {\n      logger.info('The signature is valid.');\n      // Here will be performed real action logic\n      operations.push({\n        op: 'success'\n      });\n    } else {\n      logger.info('The signature is invalid.');\n      operations.push({\n        op: 'exception',\n        message: 'The signature is invalid.'\n      });\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(operations)\n    }\n  } catch (error) {\n    logger.error(error)\n\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}