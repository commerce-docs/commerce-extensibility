{"version":3,"file":"component---src-pages-app-development-amazon-sales-channel-installation-md-ab21f2362918d57b46e3.js","mappings":"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","sources":["webpack://commerce-extensibility/./src/pages/app-development/amazon-sales-channel/installation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-extensibility/commerce-extensibility/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"install-the-amazon-sales-channel-app\"\n    }}>{`Install the Amazon Sales Channel app`}</h1>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Review the `}<a parentName=\"p\" {...{\n        \"href\": \"prerequisites.md\"\n      }}>{`Prerequisites`}</a>{` before you attempt to install the Amazon Sales Channel app.`}</p>\n    <h2 {...{\n      \"id\": \"clone-application-source-code\"\n    }}>{`Clone application source code`}</h2>\n    <p>{`Clone the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/amazon-sales-channel-app-builder\"\n      }}><inlineCode parentName=\"a\">{`amazon-sales-channel-app-builder`}</inlineCode>{` repo`}</a>{` to your working directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clone git@github.com:adobe/amazon-sales-channel-app-builder.git <custom-directory>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setup-project-dependencies\"\n    }}>{`Setup project dependencies`}</h2>\n    <p>{`Change directories to the cloned repo and run the following commands:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Download dependencies and prepare the project.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`npm install\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Build the project.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`npm run build\n`}</code></pre>\n        <p parentName=\"li\">{`The command cleans, compiles, and runs the `}<inlineCode parentName=\"p\">{`aio app build`}</inlineCode>{` command.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"configure-your-application\"\n    }}>{`Configure your application`}</h2>\n    <h3 {...{\n      \"id\": \"add-services\"\n    }}>{`Add services`}</h3>\n    <p>{`In your App Builder project:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your workspace, click the `}<strong parentName=\"p\">{`Add service`}</strong>{` pop-up menu and select `}<strong parentName=\"p\">{`API`}</strong>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`On the `}<strong parentName=\"p\">{`Add an API`}</strong>{` page, filter on `}<strong parentName=\"p\">{`Adobe Services`}</strong>{` and select `}<strong parentName=\"p\">{`I/O Management API`}</strong>{`. Then click `}<strong parentName=\"p\">{`Next`}</strong>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`On the `}<strong parentName=\"p\">{`Configure API`}</strong>{` page, select the `}<strong parentName=\"p\">{`Service Account (JWT)`}</strong>{` option and click `}<strong parentName=\"p\">{`Save configured API`}</strong>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Select `}<strong parentName=\"p\">{`Generate key pair`}</strong>{`.  `}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Click `}<strong parentName=\"p\">{`Save configured API`}</strong>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Repeat this process and create an `}<inlineCode parentName=\"p\">{`Adobe I/O Events for Adobe Commerce`}</inlineCode>{` service.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"set-up-your-environment\"\n    }}>{`Set up your environment`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`From the root of the cloned repo, make a copy of the `}<inlineCode parentName=\"p\">{`.env.dist`}</inlineCode>{` file.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`cp .env.dist .env\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run the `}<inlineCode parentName=\"p\">{`aio app use`}</inlineCode>{` command to define your workspace.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`aio app use\n`}</code></pre>\n        <p parentName=\"li\">{`The following menu displays in the terminal:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-terminal\"\n          }}>{`You are currently in:\n1. Org: <no org selected>\n2. Project: <no project selected>\n3. Workspace: <no workspace selected>\n\n? Switch to a new Adobe Developer Console configuration: A. Use the global Org / Project / Workspace configuration:\n1. Org: <your org>\n2. Project: <your project>\n3. Workspace: <your workspace>\n\n? The file /<project_path>/.env already exists: Merge\n\n✔ Successfully imported configuration for:\n1. Org: <your org>\n2. Project: <your project>\n3. Workspace: <your workspace>\n`}</code></pre>\n      </li>\n    </ol>\n    <p>{`At this point, the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.aio`}</inlineCode>{` files should be populated. You can remove any leftover property, such as `}<inlineCode parentName=\"p\">{`AIO_ims_contexts_<App_Builder_Reference>`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file.`}</p>\n    <p>{`Test your configuration by running `}<inlineCode parentName=\"p\">{`npm run deploy`}</inlineCode>{` to deploy your application into App Builder.`}</p>\n    <h4 {...{\n      \"id\": \"add-your-encryption-keys\"\n    }}>{`Add your encryption keys`}</h4>\n    <p>{`The credentials stored in the application are encrypted using an AES-256 algorithm. You must generate a set of custom encryption keys and provide them to the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file to secure authentication data.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Key`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ENCRYPTION_KEY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`32 character long encryption key`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ENCRYPTION_IV`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Initialization vector`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"add-your-adobe-commerce-credentials\"\n    }}>{`Add your Adobe Commerce credentials`}</h4>\n    <p>{`The application needs to connect to an Adobe Commerce instance to retrieve the product catalog updates and to ingest Amazon orders. Define the following variables inside the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Key`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ADOBE_COMMERCE_BASE_URL`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The base URL of your Adobe Commerce instance`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ADOBE_COMMERCE_CONSUMER_KEY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The consumer key of the integration created in Adobe Commerce`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ADOBE_COMMERCE_CONSUMER_SECRET`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The consumer secret of the integration created in Adobe Commerce`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ADOBE_COMMERCE_ACCESS_TOKEN`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The access token of the integration created in Adobe Commerce`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ADOBE_COMMERCE_ACCESS_TOKEN_SECRET`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The access token secret of the integration created in Adobe Commerce`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"configure-required-events-in-commerce\"\n    }}>{`Configure Required Events in Commerce`}</h3>\n    <p>{`Amazon Sales Channel on App Builder requires using I/O Events to automatically detect and respond to changes in your Commerce product catalog. The `}<inlineCode parentName=\"p\">{`observer.catalog_product_save_after event`}</inlineCode>{` is emitted when products are updated, such as when a product's name or price changes. You must configure this event and the fields that the event payload contains as part of setup. This event will be sent from Commerce to your App Builder application. By subscribing to the event published by Commerce, Amazon Sales Channel knows when your Commerce product catalog changes and can automatically make the relevant updates to your Amazon Marketplace product listings.`}</p>\n    <p>{`Create the `}<inlineCode parentName=\"p\">{`etc/io_events.xml`}</inlineCode>{` file in the root directory of your module, if it has not already been created. Register the `}<inlineCode parentName=\"p\">{`observer.catalog_product_save_after`}</inlineCode>{` event using the following code. If this event is already registered, ensure that it has all of the required fields.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<event name=\"catalog_product_save_after\">\n   <fields>\n      <field name=\"sku\" />\n      <field name=\"price\" />\n      <field name=\"stock_data.qty\" />\n      <field name=\"asin\" />\n      <field name=\"amazon_condition\" />\n      <field name=\"name\" />\n   </fields>\n</event>\n`}</code></pre>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"../../events/module-development.md#io_eventsxml\"\n      }}>{`I/O Events for Adobe Commerce`}</a>{` for more details. Adobe recommends using the `}<inlineCode parentName=\"p\">{`io_events.xml`}</inlineCode>{` method to configure events, but you can also configure events by modifying the `}<inlineCode parentName=\"p\">{`app.config`}</inlineCode>{` file or by using the CLI. The same event and fields are required, regardless of the method implemented.`}</p>\n    <h3 {...{\n      \"id\": \"subscribe-to-adobe-commerce-events\"\n    }}>{`Subscribe to Adobe Commerce events`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Ensure that your Adobe Commerce instance is registered as an event provider as described in `}<a parentName=\"p\" {...{\n            \"href\": \"../../events/configure-commerce.md#subscribe-and-register-events\"\n          }}>{`Subscribe and register events`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Register the `}<inlineCode parentName=\"p\">{`observer.catalog_product_save_after`}</inlineCode>{` event in your project in `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.adobe.com/console/\"\n          }}>{`developer console`}</a>{`.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Add a new service of type `}<inlineCode parentName=\"li\">{`Event`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`Select your event provider.`}</li>\n          <li parentName=\"ul\">{`Choose the `}<inlineCode parentName=\"li\">{`observer.catalog_product_save_after`}</inlineCode>{` event subscription.`}</li>\n          <li parentName=\"ul\">{`Select the JWT credential.`}</li>\n          <li parentName=\"ul\">{`Set a name for your event registration.`}</li>\n          <li parentName=\"ul\">{`Select your Runtime action, which should be similar to `}<inlineCode parentName=\"li\">{`amazon-app/__secured_catalog-product-save-after-listener - <your project>-<your workspace>`}</inlineCode>{`, then save the event.`}</li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`At this point, if you go to the `}<inlineCode parentName=\"p\">{`Debug tracing`}</inlineCode>{` area in your new event created inside the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/console/\"\n      }}>{`developer console`}</a>{`, you should be able to see any incoming events from your Adobe Commerce instance.`}</p>\n    <h2 {...{\n      \"id\": \"local-dev-environment\"\n    }}>{`Local Dev environment`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Compile the TypeScript files in the `}<inlineCode parentName=\"p\">{`actions-src`}</inlineCode>{` directory into `}<inlineCode parentName=\"p\">{`actions`}</inlineCode>{`.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`npm run compile\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Start your local dev server.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`aio app run\n`}</code></pre>\n        <p parentName=\"li\">{`By default, the app runs on `}<inlineCode parentName=\"p\">{`localhost:9080`}</inlineCode>{`. If the port is not available,check the console logs for the updated port.`}</p>\n        <p parentName=\"li\">{`The UI is served locally, but actions are deployed and served from Adobe I/O Runtime. To start a local serverless stack and also run your actions locally, use the `}<inlineCode parentName=\"p\">{`aio app run --local`}</inlineCode>{` option.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"admin-ui-sdk\"\n    }}>{`Admin UI SDK`}</h2>\n    <p>{`The Amazon Sales Channel on App Builder is securely injected into the Commerce Admin experience using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../admin-ui-sdk/index.md\"\n      }}>{`Admin UI SDK`}</a>{`. This UI extensibility functionality enables merchant administrators to use a seamless app UI experience in the Commerce Admin. This sample app is just one example of how App Builder integrations can extend Commerce Admin with their own apps' UI.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"../../admin-ui-sdk/configuration.md\"\n      }}>{`Admin configuration and testing`}</a>{` describes how to test functionality locally. For testing in production, push the Amazon Sales Channel app to production and have an administrator approve the app.`}</p>\n    <h2 {...{\n      \"id\": \"test-the-app\"\n    }}>{`Test the app`}</h2>\n    <p>{`Use the following commands to run unit tests:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`aio app test #runs UI and actions tests\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`aio app test --e2e #runs end-to-end tests\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"adding-additional-action-dependencies\"\n    }}>{`Adding additional action dependencies`}</h3>\n    <p>{`You have two options to resolve your action's dependencies:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Packaged action file`}</strong>{`: Add your actions dependencies to the root `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` and install them using `}<inlineCode parentName=\"p\">{`npm install`}</inlineCode>{`. Then set the `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{` field in `}<inlineCode parentName=\"p\">{`ext.config.yaml`}</inlineCode>{` to point to the `}<strong parentName=\"p\">{`entry file`}</strong>{` of your action folder. `}<inlineCode parentName=\"p\">{`webpack`}</inlineCode>{` is used to package your code and dependencies into a single minified `}<inlineCode parentName=\"p\">{`js`}</inlineCode>{` file. The action will then be deployed as a single file. Use this method if you want to reduce the size of your actions.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Zipped action folder`}</strong>{`: In the folder containing the action code, add a `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` with the action dependencies. Then set the `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{` field in `}<inlineCode parentName=\"p\">{`ext.config.yaml`}</inlineCode>{` to point to the `}<strong parentName=\"p\">{`folder`}</strong>{` of that action. The required dependencies are installed within that directory. In addition, the process zips the folder before deploying it as a zipped action. Use this method if you want to keep your action's dependencies separated.`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"debugging-in-vs-code\"\n    }}>{`Debugging in VS Code`}</h3>\n    <p>{`Both UI and actions can be debugged while your local server is running. To start debugging, open the VS Code debugger and select the `}<inlineCode parentName=\"p\">{`WebAndActions`}</inlineCode>{` debugging configuration. Other debug configurations are also available for the UI and each separate action.`}</p>\n    <h2 {...{\n      \"id\": \"deploy-the-app\"\n    }}>{`Deploy the app`}</h2>\n    <p>{`Run the following command to compile, build, and deploy all TypeScript actions on Runtime and static files to CDN.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm run deploy\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`aio app undeploy`}</inlineCode>{` command undeploys the app.`}</p>\n    <h2 {...{\n      \"id\": \"typescript-support-for-ui\"\n    }}>{`Typescript support for UI`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`.tsx`}</inlineCode>{` extension to designate TypeScript for React components. Also, create a `}<inlineCode parentName=\"p\">{`tsconfig.json`}</inlineCode>{` file that defines the following configuration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"jsx\": \"react\"\n   }\n} \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}