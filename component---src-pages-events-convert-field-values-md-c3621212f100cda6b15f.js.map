{"version":3,"file":"component---src-pages-events-convert-field-values-md-c3621212f100cda6b15f.js","mappings":"wSAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,gCACH,iCACL,kBAAK,ugBACL,eACE,GAAM,wBACH,yBACL,kBAAK,wCAAsC,uBAAYC,WAAW,KAAM,2BAAwC,kCAAgC,uBAAYA,WAAW,KAAM,WAAwB,2BAAyB,uBAAYA,WAAW,KAAM,SAAsB,SAAO,uBAAYA,WAAW,KAAM,SAAsB,qCAAmC,uBAAYA,WAAW,KAAM,SAAsB,wMACja,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,gPAYP,kBAAK,uBAAqB,uBAAYA,WAAW,KAAM,uCAAoD,gCAA8B,uBAAYA,WAAW,KAAM,cAA2B,uKACjM,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MACN,mBACL,eAAIA,WAAW,KACb,MAAS,MACN,oBACL,eAAIA,WAAW,KACb,MAAS,MACN,kBAGT,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MACN,MACL,eAAIA,WAAW,KACb,MAAS,MACN,6BACL,eAAIA,WAAW,KACb,MAAS,MACN,mFAEP,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MACN,MACL,eAAIA,WAAW,KACb,MAAS,MACN,iBACL,eAAIA,WAAW,KACb,MAAS,MACN,oEAEP,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MACN,MACL,eAAIA,WAAW,KACb,MAAS,MACN,gBACL,eAAIA,WAAW,KACb,MAAS,MACN,iEAEP,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MACN,MACL,eAAIA,WAAW,KACb,MAAS,MACN,uBACL,eAAIA,WAAW,KACb,MAAS,MACN,sGAIX,kBAAK,kCAAgC,uBAAYA,WAAW,KAAM,2BAAwC,8CAA4C,uBAAYA,WAAW,KAAM,cAA2B,wBAC9M,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,yvBA8BP,kBAAK,+DACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,uHAUP,kBAAK,0CACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,wIAUP,eACE,GAAM,0BACH,2BACL,kBAAK,kCAAgC,uBAAYA,WAAW,KAAM,iBAA8B,aAAW,uBAAYA,WAAW,KAAM,yBAAsC,iFAA+E,uBAAYA,WAAW,KAAM,cAA2B,mEACrT,eACE,GAAM,gBACH,iBACL,kBAAK,QAAM,cAAGA,WAAW,IACrB,KAAQ,sCACP,uBAAYA,WAAW,KAAM,yCAAsD,YAAgB,qHAAmH,uBAAYA,WAAW,KAAM,cAA2B,8GACnR,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,mNAEP,eACE,GAAM,mBACL,uBAAYA,WAAW,MAAO,cAA2B,UAC5D,kBAAK,0BAAwB,uBAAYA,WAAW,KAAM,cAA2B,sCAAoC,uBAAYA,WAAW,KAAM,gCAA6C,oBAAkB,mBAAQA,WAAW,KAAM,gBAAyB,oBACvQ,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,wYAaP,eACE,GAAM,kCACH,iBAAe,uBAAYA,WAAW,MAAO,iBAA8B,UAChF,kBAAK,QAAM,uBAAYA,WAAW,KAAM,aAA0B,sBAAoB,uBAAYA,WAAW,KAAM,SAAsB,6JACzI,kBAAK,yDAAuD,uBAAYA,WAAW,KAAM,cAA2B,oBAAkB,uBAAYA,WAAW,KAAM,uCAAoD,6BAA2B,uBAAYA,WAAW,KAAM,2BAAwC,sBACvT,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,+YAUX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-extensibility/./src/pages/events/convert-field-values.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-extensibility/commerce-extensibility/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"convert-payload-field-values\"\n    }}>{`Convert payload field values`}</h1>\n    <p>{`The payload of an event often includes field values that are not easily interpretable for third-party implementations. For example, a value might be stored in the Commerce database as an integer, but the external system stores the same information as a string. Alternatively, instead of transforming data types, you might want to change a Commerce-supplied string to a string defined in the external system. To address this issue, you can implement a converter, enabling custom values for any field in the payload.`}</p>\n    <h2 {...{\n      \"id\": \"converter-definition\"\n    }}>{`Converter definition`}</h2>\n    <p>{`Your converter class must implement `}<inlineCode parentName=\"p\">{`FieldConverterInterface`}</inlineCode>{`. This interface contains the `}<inlineCode parentName=\"p\">{`convert`}</inlineCode>{` method, which accepts `}<inlineCode parentName=\"p\">{`mixed`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Event`}</inlineCode>{` arguments. The method returns a `}<inlineCode parentName=\"p\">{`mixed`}</inlineCode>{` data type. You must create individual converter classes for each field when converting multiple fields within a payload. You can reuse a class to replace a specific field across multiple events.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`interface FieldConverterInterface\n{\n    /**\n     * Converts a field value\n     *\n     * @param mixed $value\n     * @param Event $event\n     * @return mixed\n     */\n    public function convert(mixed $value, Event $event);\n}\n`}</code></pre>\n    <p>{`As an example, the `}<inlineCode parentName=\"p\">{`observer.catalog_product_save_after`}</inlineCode>{` event contains a top-level `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` field, which must contain an integer value. Convert these values to strings that match values on the external system. The following table describes these values.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Commerce value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Converted value`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`NOT_VISIBLE_INDIVIDUALLY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`This product should not be displayed if it is part of a configurable product.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`CATALOG_ONLY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`This product appears in catalog listings, but not in searches.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`SEARCH_ONLY`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`This product appears in searches, but not catalog listings.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`4`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`CATALOG_AND_SEARCH`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`This product appears in catalog listings and searches. For most products, this is the default.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`In the following example, the `}<inlineCode parentName=\"p\">{`TestConverterVisibility`}</inlineCode>{` converter class updates the value of the `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` field to a string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndeclare(strict_types=1);\n\nnamespace Magento\\\\AdobeCommerceEventsClient\\\\Event;\n\nuse Magento\\\\AdobeCommerceEventsClient\\\\Event\\\\Filter\\\\FieldConverterInterface;\n\nclass TestConverterVisibility implements FieldConverterInterface\n{\n    /**\n     * Method used to convert field value\n     *\n     * @param mixed $value\n     * @return mixed\n     */\n    public function convert(mixed $value, Event $event): mixed\n    {\n        return match ($value) {\n            '1' => 'NOT_VISIBLE_INDIVIDUALLY',\n            '2' => 'CATALOG_ONLY',\n            '3' => 'SEARCH_ONLY',\n            '4' => 'CATALOG_AND_SEARCH'\n        };\n    }\n}\n`}</code></pre>\n    <p>{`The default payload for this event includes the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n   \"event\":{\n      \"data\":{\n         \"value\":{\n            \"visibility\":\"4\",\n        }\n      }\n   }\n}\n`}</code></pre>\n    <p>{`The converter changes the payload to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n   \"event\":{\n      \"data\":{\n         \"value\":{\n            \"visibility\":\"CATALOG_AND_SEARCH\",\n        }\n      }\n   }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"register-the-converter\"\n    }}>{`Register the converter`}</h2>\n    <p>{`You must configure a module's `}<inlineCode parentName=\"p\">{`io_events.xml`}</inlineCode>{` or root `}<inlineCode parentName=\"p\">{`app/etc/io_events.xml`}</inlineCode>{` file to update the required fields. You can also declare them in the system `}<inlineCode parentName=\"p\">{`config.php`}</inlineCode>{` file or add them when using the CLI to subscribe to an event.`}</p>\n    <h3 {...{\n      \"id\": \"command-line\"\n    }}>{`Command line`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"commands.md#subscribe-to-an-event\"\n      }}><inlineCode parentName=\"a\">{`bin/magento events:subscribe --fields`}</inlineCode>{` command`}</a>{` defines the fields and converters to include in the payload of a subscribed event. The example command adds the `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` field and provides the path to the converter class. You can specify multiple fields in the same request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento events:subscribe observer.catalog_product_save_after --fields=\"store_id\" --fields='{\"name\":\"visibility\", \"converter\": \"Magento\\\\AdobeCommerceEventsClient\\\\Event\\\\TestConverterVisibility\"}'\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"configphp-file\"\n    }}><inlineCode parentName=\"h3\">{`config.php`}</inlineCode>{` file`}</h3>\n    <p>{`The following example `}<inlineCode parentName=\"p\">{`config.php`}</inlineCode>{` is the equivalent of the example `}<inlineCode parentName=\"p\">{`bin/magento events:subscribe`}</inlineCode>{` command in the `}<strong parentName=\"p\">{`Command line`}</strong>{` example above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`'io_events' => [\n        'observer.catalog_product_save_after' => [\n            'fields' => [\n                'store_id',\n                [\n                    'name' => 'visibility',\n                    'converter' => 'Magento\\\\\\\\AdobeCommerceEventsClient\\\\\\\\Event\\\\\\\\TestConverterVisibility'\n                ]\n            ],\n            'enabled' => 1\n        ]\n ]       \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"configure-an-io_eventsxml-file\"\n    }}>{`Configure an `}<inlineCode parentName=\"h3\">{`io_events.xml`}</inlineCode>{` file`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`converter`}</inlineCode>{` attribute of the `}<inlineCode parentName=\"p\">{`field`}</inlineCode>{` element defines the converter class that updates the event data field value for the specified event. Only one converter class can be defined per field.`}</p>\n    <p>{`The following example updates the value of the field `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` present in the `}<inlineCode parentName=\"p\">{`observer.catalog_product_save_after`}</inlineCode>{` event payload using the `}<inlineCode parentName=\"p\">{`TestConverterVisibility`}</inlineCode>{` converter class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module-commerce-events-client/etc/io_events.xsd\">\n    <event name=\"observer.catalog_product_save_after\" >\n        <fields>\n            <field name=\"visibility\" converter=\"Magento\\\\AdobeCommerceEventsClient\\\\Event\\\\TestConverterVisibility\"/>\n        </fields>\n    </event>\n</config>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}