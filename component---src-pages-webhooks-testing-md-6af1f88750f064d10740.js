"use strict";(self.webpackChunkcommerce_extensibility=self.webpackChunkcommerce_extensibility||[]).push([[7610],{27086:function(e,o,n){n.r(o),n.d(o,{_frontmatter:function(){return l},default:function(){return c}});var t=n(58168),a=n(80045),r=(n(88763),n(15680)),d=n(83407);const m=["components"],l={},s={_frontmatter:l},i=d.A;function c(e){let{components:o}=e,n=(0,a.A)(e,m);return(0,r.mdx)(i,(0,t.A)({},s,n,{components:o,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"testing-webhooks"},"Testing Webhooks"),(0,r.mdx)("p",null,"Use the ",(0,r.mdx)("a",{parentName:"p",href:"commands.md#emulate-webhook-execution"},(0,r.mdx)("inlineCode",{parentName:"a"},"webhooks:dev:run <webhook-name> <webhook-arguments-payload>"))," command in development mode to test your webhooks locally. It emulates the execution of your registered webhook, which contains a custom payload, without requiring changes to the Commerce application. Run this command after setting the initial webhook payload in a ",(0,r.mdx)("inlineCode",{parentName:"p"},"webhooks.xml")," file. Then run the command again any time you make subsequent modifications to the payload until you can confirm that the payload works as expected."),(0,r.mdx)("p",null,"In this example, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"webhooks.xml")," file registered the following webhook:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'    <method name="observer.checkout_cart_product_add_before" type="before">\n        <hooks>\n            <batch name="Update_Cart">\n                <hook name="validate_stock" url="{env:APP_BUILDER_PROJECT_URL}/product-validate-stock" timeout="2000" softTimeout="200" fallbackErrorMessage="The product stock validation failed">\n                    <fields>\n                        <field name=\'product.name\' source=\'data.product.name\' />\n                        <field name=\'product.sku\' source=\'data.product.sku\' />\n                    </fields>\n                </hook>\n            </batch>\n        </hooks>\n    </method>\n')),(0,r.mdx)("p",null,"Instead of manually adding a product to the cart from the storefront, you can run the following command, which specifies a custom payload:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'bin/magento webhooks:dev:run observer.checkout_cart_product_add_before:before \'{"data":{"product":{"sku":"simple-product","name":"Simple Product"}}}\'\n')),(0,r.mdx)("p",null,"The emulated webhook endpoint receives the following payload, according to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"fields")," configured for the webhook:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{"product":{"name":"Simple Product","sku":"simple-product"}}\n')),(0,r.mdx)("p",null,"If an error occurs, or if an exception is thrown, a message similar to the following is displayed:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-terminal"},'Failed to process webhook "observer.checkout_cart_product_add_before". Or webhook endpoint returned exception operation. Error: Webhook Response: The product is out of stock\nCheck logs for more information.\n')),(0,r.mdx)("p",null,"Responses for a webhook endpoint may be cached if the ",(0,r.mdx)("inlineCode",{parentName:"p"},"ttl")," attribute for a hook is set. To clean the webhook response cache while testing your webhooks locally, run the following command:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento cache:clean webhooks_response\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-webhooks-testing-md-6af1f88750f064d10740.js.map