{"version":3,"file":"component---src-pages-webhooks-testing-md-6af1f88750f064d10740.js","mappings":"wSAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,oBACH,qBACL,kBAAK,YAAU,cAAGC,WAAW,IACzB,KAAQ,0CACP,uBAAYA,WAAW,KAAM,gEAAgF,8QAA4Q,uBAAYA,WAAW,KAAM,gBAA6B,0JACxb,kBAAK,yBAAuB,uBAAYA,WAAW,KAAM,gBAA6B,4CACtF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,woBAaP,kBAAK,+IACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,+JAEP,kBAAK,mFAAiF,uBAAYA,WAAW,KAAM,UAAuB,iCAC1I,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,oEAEP,kBAAK,uGACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,qBACV,uNAGP,kBAAK,0DAAwD,uBAAYA,WAAW,KAAM,OAAoB,sIAC9G,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,gDAIX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-extensibility/./src/pages/webhooks/testing.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-extensibility/commerce-extensibility/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"testing-webhooks\"\n    }}>{`Testing Webhooks`}</h1>\n    <p>{`Use the `}<a parentName=\"p\" {...{\n        \"href\": \"commands.md#emulate-webhook-execution\"\n      }}><inlineCode parentName=\"a\">{`webhooks:dev:run <webhook-name> <webhook-arguments-payload>`}</inlineCode></a>{` command in development mode to test your webhooks locally. It emulates the execution of your registered webhook, which contains a custom payload, without requiring changes to the Commerce application. Run this command after setting the initial webhook payload in a `}<inlineCode parentName=\"p\">{`webhooks.xml`}</inlineCode>{` file. Then run the command again any time you make subsequent modifications to the payload until you can confirm that the payload works as expected.`}</p>\n    <p>{`In this example, the `}<inlineCode parentName=\"p\">{`webhooks.xml`}</inlineCode>{` file registered the following webhook:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`    <method name=\"observer.checkout_cart_product_add_before\" type=\"before\">\n        <hooks>\n            <batch name=\"Update_Cart\">\n                <hook name=\"validate_stock\" url=\"{env:APP_BUILDER_PROJECT_URL}/product-validate-stock\" timeout=\"2000\" softTimeout=\"200\" fallbackErrorMessage=\"The product stock validation failed\">\n                    <fields>\n                        <field name='product.name' source='data.product.name' />\n                        <field name='product.sku' source='data.product.sku' />\n                    </fields>\n                </hook>\n            </batch>\n        </hooks>\n    </method>\n`}</code></pre>\n    <p>{`Instead of manually adding a product to the cart from the storefront, you can run the following command, which specifies a custom payload:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento webhooks:dev:run observer.checkout_cart_product_add_before:before '{\"data\":{\"product\":{\"sku\":\"simple-product\",\"name\":\"Simple Product\"}}}'\n`}</code></pre>\n    <p>{`The emulated webhook endpoint receives the following payload, according to the `}<inlineCode parentName=\"p\">{`fields`}</inlineCode>{` configured for the webhook:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\"product\":{\"name\":\"Simple Product\",\"sku\":\"simple-product\"}}\n`}</code></pre>\n    <p>{`If an error occurs, or if an exception is thrown, a message similar to the following is displayed:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Failed to process webhook \"observer.checkout_cart_product_add_before\". Or webhook endpoint returned exception operation. Error: Webhook Response: The product is out of stock\nCheck logs for more information.\n`}</code></pre>\n    <p>{`Responses for a webhook endpoint may be cached if the `}<inlineCode parentName=\"p\">{`ttl`}</inlineCode>{` attribute for a hook is set. To clean the webhook response cache while testing your webhooks locally, run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento cache:clean webhooks_response\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}